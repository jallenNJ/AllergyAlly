var exports = module.exports = {};
const Soup = require('jssoup').default;
const request = require("request-promise");
const fetch = require("node-fetch");

var BaseWebSite = "https://www.foodnetwork.com/search/";
const regex = /^\/\/www.foodnetwork.com\/recipes\/.*/;



exports.StartScrape = async function(FoodsArray){
    LinkArray = await GetRecipeLinks(FoodsArray);
    IngredientsList = await GetIngredients(LinkArray);
    return IngredientsList;
}

const getHTML = async url => {
    return await fetch(url)
    .then(res => res.text())
}

async function GetRecipeLinks(FoodsArray){
//exports.Scrape = async function(FoodsArray) {
    FoodToRecipe = {};
    for(Food of FoodsArray){
        SearchLink = BaseWebSite + Food + "-";
        RecipePage = await getHTML(SearchLink);
        var RecipePageParser = new Soup(RecipePage);
        var RecipeAnchors = RecipePageParser.findAll('a');
        RecipeLinks = [];
        for(Anchor of RecipeAnchors){
            if(regex.test(Anchor.attrs.href)){
                RecipeLinks.push(Anchor.attrs.href);
            }
        }
        UniqueRecipeLinks = RecipeLinks.filter((val, index, self) => {
            return self.indexOf(val) == index && val.length;
        })
        FoodToRecipe[Food] = UniqueRecipeLinks;
    }
    return FoodToRecipe;
}

async function GetIngredients(LinkJson){
    LinkToIngredient = {};
    for(FoodKey in LinkJson){
        LinkArray = LinkJson[FoodKey];
        tempStr = ""
        for(Link of LinkArray){    
            RecipePage = await getHTML("https:" + Link);
            var RecipePageParser = new Soup(RecipePage);
            var RecipeIngredients = RecipePageParser.findAll('p');
            for(Ingredient of RecipeIngredients){
                if(Ingredient.attrs.class == "o-Ingredients__a-Ingredient"){
                    tempStr += Ingredient.text + " ";
                }
            }
        }
        LinkToIngredient[FoodKey] = tempStr.toLowerCase();
    }
    return LinkToIngredient;
}
